
// todo

/*// Set the container width, and override it for fixed navbars in media queries
.container {
	.container-fixed();
}

// mobile first defaults
.row {
	.make-row();
}

// Common styles for small and large grid columns
.make-grid-columns();


// Extra small grid
//
// Grid classes for extra small devices like smartphones. No offset, push, or
// pull classes are present here due to the size of the target.
//
// Note that `.col-xs-12` doesn't get floated on purpose--there's no need since
// it's full-width.

.make-grid-columns-float(xs);
.make-grid(@grid-columns, xs, width);
.make-grid(@grid-columns, xs, pull);
.make-grid(@grid-columns, xs, push);
.make-grid(@grid-columns, xs, offset);


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.
//
// Note that `.col-sm-12` doesn't get floated on purpose--there's no need since
// it's full-width.

@media (min-width: @screen-sm-min) {
	.container {
		width: @container-sm;
	}

	.make-grid-columns-float(sm);
	.make-grid(@grid-columns, sm, width);
	.make-grid(@grid-columns, sm, pull);
	.make-grid(@grid-columns, sm, push);
	.make-grid(@grid-columns, sm, offset);
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.
//
// Note that `.col-md-12` doesn't get floated on purpose--there's no need since
// it's full-width.

@media (min-width: @screen-md-min) {
	.container {
		width: @container-md;
	}

	.make-grid-columns-float(md);
	.make-grid(@grid-columns, md, width);
	.make-grid(@grid-columns, md, pull);
	.make-grid(@grid-columns, md, push);
	.make-grid(@grid-columns, md, offset);
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.
//
// Note that `.col-lg-12` doesn't get floated on purpose--there's no need since
// it's full-width.

@media (min-width: @screen-lg-min) {
	.container {
		width: @container-lg;
	}

	.make-grid-columns-float(lg);
	.make-grid(@grid-columns, lg, width);
	.make-grid(@grid-columns, lg, pull);
	.make-grid(@grid-columns, lg, push);
	.make-grid(@grid-columns, lg, offset);
}*/


// IE10 in Windows (Phone) 8
//
// Support for responsive views via media queries is kind of borked in IE10, for
// Surface/desktop in split view and for Windows Phone 8. This particular fix
// must be accompanied by a snippet of JavaScript to sniff the user agent and
// apply some conditional CSS to *only* the Surface/desktop Windows 8. Look at
// our Getting Started page for more information on this bug.
//
// For more information, see the following:
//
// Issue: https://github.com/twbs/bootstrap/issues/10497
// Docs: http://getbootstrap.com/getting-started/#browsers
// Source: http://timkadlec.com/2012/10/ie10-snap-mode-and-responsive-design/

/*
@-ms-viewport {
	width: device-width;
}


// Visibility utilities

.visible-xs {
	.responsive-invisibility();
	@media (max-width: @screen-xs-max) {
		.responsive-visibility();
	}
	&.visible-sm {
		@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
			.responsive-visibility();
		}
	}
	&.visible-md {
		@media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
			.responsive-visibility();
		}
	}
	&.visible-lg {
		@media (min-width: @screen-lg-min) {
			.responsive-visibility();
		}
	}
}
.visible-sm {
	.responsive-invisibility();
	&.visible-xs {
		@media (max-width: @screen-xs-max) {
			.responsive-visibility();
		}
	}
	@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
		.responsive-visibility();
	}
	&.visible-md {
		@media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
			.responsive-visibility();
		}
	}
	&.visible-lg {
		@media (min-width: @screen-lg-min) {
			.responsive-visibility();
		}
	}
}
.visible-md {
	.responsive-invisibility();
	&.visible-xs {
		@media (max-width: @screen-xs-max) {
			.responsive-visibility();
		}
	}
	&.visible-sm {
		@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
			.responsive-visibility();
		}
	}
	@media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
		.responsive-visibility();
	}
	&.visible-lg {
		@media (min-width: @screen-lg-min) {
			.responsive-visibility();
		}
	}
}
.visible-lg {
	.responsive-invisibility();
	&.visible-xs {
		@media (max-width: @screen-xs-max) {
			.responsive-visibility();
		}
	}
	&.visible-sm {
		@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
			.responsive-visibility();
		}
	}
	&.visible-md {
		@media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
			.responsive-visibility();
		}
	}
	@media (min-width: @screen-lg-min) {
		.responsive-visibility();
	}
}

.hidden-xs {
	.responsive-visibility();
	@media (max-width: @screen-xs-max) {
		.responsive-invisibility();
	}
	&.hidden-sm {
		@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
			.responsive-invisibility();
		}
	}
	&.hidden-md {
		@media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
			.responsive-invisibility();
		}
	}
	&.hidden-lg {
		@media (min-width: @screen-lg-min) {
			.responsive-invisibility();
		}
	}
}
.hidden-sm {
	.responsive-visibility();
	&.hidden-xs {
		@media (max-width: @screen-xs-max) {
			.responsive-invisibility();
		}
	}
	@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
		.responsive-invisibility();
	}
	&.hidden-md {
		@media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
			.responsive-invisibility();
		}
	}
	&.hidden-lg {
		@media (min-width: @screen-lg-min) {
			.responsive-invisibility();
		}
	}
}
.hidden-md {
	.responsive-visibility();
	&.hidden-xs {
		@media (max-width: @screen-xs-max) {
			.responsive-invisibility();
		}
	}
	&.hidden-sm {
		@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
			.responsive-invisibility();
		}
	}
	@media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
		.responsive-invisibility();
	}
	&.hidden-lg {
		@media (min-width: @screen-lg-min) {
			.responsive-invisibility();
		}
	}
}
.hidden-lg {
	.responsive-visibility();
	&.hidden-xs {
		@media (max-width: @screen-xs-max) {
			.responsive-invisibility();
		}
	}
	&.hidden-sm {
		@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
			.responsive-invisibility();
		}
	}
	&.hidden-md {
		@media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
			.responsive-invisibility();
		}
	}
	@media (min-width: @screen-lg-min) {
		.responsive-invisibility();
	}
}

// Print utilities
.visible-print {
	.responsive-invisibility();
}

@media print {
	.visible-print {
		.responsive-visibility();
	}
	.hidden-print {
		.responsive-invisibility();
	}
}
*/
