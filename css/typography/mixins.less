

// HEADINGS

.d-h(@full: 1) /*when (@full = 1)*/ {
	.apply() when (@full = 1) {
		font-family: @headings-font-family;
		font-weight: @headings-font-weight;
		line-height: @headings-line-height;
		color: @headings-color;
		text-rendering: optimizelegibility; // Fix the character spacing for headings

		small {
			font-weight: normal;
			line-height: 1;
		}

		img {
			margin: 0;
		}
	}
	.apply() when (@full = 0) {}
	.apply();
}

.d-h1-3(@full: 1) {
	.apply() when (@full = 1) {
		margin-top: @line-height-computed;
		margin-bottom: (@line-height-computed / 2);

		small {
			font-size: 65%;
		}
	}
	.apply() when (@full = 0) {}
	.apply();
}

.d-h4-6(@full: 1) /*when (@full = 1)*/ {
	.apply() when (@full = 1) {
		margin-top: (@line-height-computed / 2);
		margin-bottom: (@line-height-computed / 2);

		small {
			font-size: 75%;
		}
	}
	.apply() when (@full = 0) {}
	.apply();
}

.d-h1(@full: 1) { .d-h(@full); .d-h1-3(@full); font-size: @font-size-h1; }
.d-h2(@full: 1) { .d-h(@full); .d-h1-3(@full); font-size: @font-size-h2; }
.d-h3(@full: 1) { .d-h(@full); .d-h1-3(@full); font-size: @font-size-h3; }
.d-h4(@full: 1) { .d-h(@full); .d-h4-6(@full); font-size: @font-size-h4; }
.d-h5(@full: 1) { .d-h(@full); .d-h4-6(@full); font-size: @font-size-h5; }
.d-h6(@full: 1) { .d-h(@full); .d-h4-6(@full); font-size: @font-size-h6; }


// LISTS

.d-unstyle-list() {
	margin-left: 0;
	list-style: none;
}

.d-unstyle-list-nested() {
	.d-unstyle-list();

	ul, ol {
		.d-unstyle-list();
	}
}


// LINKS

.d-link-color(@color) {
	& 		             { color: @color; }
	&:visited 			 { color: @color; }
	/*&:focus, */&:hover { color: lighten(@color, 20%); }
	&:active 			 { color: lighten(@color, 20%); }
}

.d-link-color(@color, @color-hover) {
	& 		             { color: @color; }
	&:visited 			 { color: @color; }
	/*&:focus, */&:hover { color: @color-hover; }
	&:active 			 { color: @color-hover; }
}

.d-link-color(@color, @color-hover, @color-visited, @color-active) {
	& 		             { color: @color; }
	&:visited 			 { color: @color-visited; }
	/*&:focus, */&:hover { color: @color-hover; }
	&:active 			 { color: @color-active; }
}

.d-link-static-color(@color) {
	& 		             { color: @color; }
	&:visited 			 { color: @color; }
	/*&:focus, */&:hover { color: @color; }
	&:active 			 { color: @color; }
}


// TABLES

.d-table-base() {
	width: 100%;
	margin-bottom: @line-height-computed;
	background-color: @table-bg;

	// Cells
	> thead,
	> tbody,
	> tfoot {
		> tr {
			> th,
			> td {
				padding: @table-cell-padding;
				line-height: @line-height-base;
				vertical-align: top;
				border-top: 1px solid @table-border-color;
				.align-attributes();
			}
		}
	}

	// Bottom align for column headings
	> thead > tr > th {
		vertical-align: bottom;
		border-bottom: 2px solid @table-border-color;
		.align-attributes();
	}

	// Remove top border from thead by default
	> caption + thead,
	> colgroup + thead,
	> thead:first-child {
		> tr:first-child {
			> th,
			> td {
				border-top: 0;
			}
		}
	}

	// Account for multiple tbody instances
	> tbody + tbody {
		border-top: 2px solid @table-border-color;
	}


	// Condensed table w/ half padding
	.condensed() {
		> thead,
		> tbody,
		> tfoot {
			> tr {
				> th,
				> td {
					padding: @table-condensed-cell-padding;
				}
			}
		}
	}

	// Bordered table
	// Add borders all around the table and between all the columns.
	.bordered() {
		border: 1px solid @table-border-color;
		> thead,
		> tbody,
		> tfoot {
			> tr {
				> th,
				> td {
					border: 1px solid @table-border-color;
				}
			}
		}
		> thead > tr {
			> th,
			> td {
				border-bottom-width: 2px;
			}
		}
	}

	// Zebra-striping
	// Default zebra-stripe styles (alternating gray and transparent backgrounds)
	.striped() {
		> tbody > tr:nth-child(odd) {
			> td,
			> th {
				background-color: @table-bg-accent;
			}
		}
	}

	// Hover effect
	// Placed here since it has to come after the potential zebra striping
	.hover() {
		> tbody > tr:hover {
			> td,
			> th {
				background-color: @table-bg-hover;
			}
		}
	}

	.align-attributes() {
		&[align="left"]    { text-align: left; }
		&[align="center"]  { text-align: center; }
		&[align="right"]   { text-align: right; }
		&[valign="top"]    { vertical-align: top; }
		&[valign="middle"] { vertical-align: middle; }
		&[valign="bottom"] { vertical-align: bottom; }
	}

	.responsive-container() {
		width: 100%;
		margin-bottom: (@line-height-computed * 0.75);
		overflow-y: hidden;
		overflow-x: scroll;
		-ms-overflow-style: -ms-autohiding-scrollbar;
		border: 1px solid @table-border-color;
		-webkit-overflow-scrolling: touch;
	}

	// Tighten up spacing
	.responsive-table() {
		margin-bottom: 0;

		// Ensure the content doesn't wrap
		> thead,
		> tbody,
		> tfoot {
			> tr {
				> th,
				> td {
					white-space: nowrap;
				}
			}
		}
	}

	// Special overrides for the bordered tables
	.responsive-table-bordered() {
		border: 0;

		// Nuke the appropriate borders so that the parent can handle them
		> thead,
		> tbody,
		> tfoot {
			> tr {
				> th:first-child,
				> td:first-child {
					border-left: 0;
				}
				> th:last-child,
				> td:last-child {
					border-right: 0;
				}
			}
		}

		// Only nuke the last row's bottom-border in `tbody` and `tfoot` since
		// chances are there will be only one `tr` in a `thead` and that would
		// remove the border altogether.
		> tbody,
		> tfoot {
			> tr:last-child {
				> th,
				> td {
					border-bottom: 0;
				}
			}
		}

	}
}
